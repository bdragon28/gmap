<?php
/* $Id$ */
// vim:set ft=php:

/**
 * @file
 * GMap Filters is a module to include Google Map in a module
 *
 * GMap filter allows the insertion of a googlemap in a module.  It has
 * a page to creat a macro and then a filter to convet the macro into the
 * html and javascript code required to insert a google map.
 */

define('GMAP_LOAD_METHOD', variable_get('gmap_method','Static'));

// @@@ Remove these and generalize lines. @@@
// These are now stored in the map defaults, but not all the code uses it yet.
define('GMAP_LINECOLOR1', '#00cc00');
define('GMAP_LINECOLOR2', '#ff0000');
define('GMAP_LINECOLOR3', '#0000ff');
// @@@ Remove these and generalize lines. @@@

define('GMAP_CLUSTER', variable_get('gmap_cluster',0));
define('GMAP_WMS', variable_get('gmap_wms',0));

define('GMAP_API_V', '2.66');

/**
 * Get the defaults for a gmap.
 */
function gmap_defaults() {
  return variable_get('gmap_default', array(
    'width' => '300px',
    'height' => '200px',
    'zoom' => 3,
    'controltype' => 'Small',
    'align' => 'None',
    'latlong' => '40,0',
    'maptype' => 'Map',
    'line_colors' => array('#00cc00', '#ff0000', '#0000ff'),
    'behavior' => array(
      'nodrag' => FALSE,
      'nokeyboard' => TRUE,
    ),
  ));
}

/**
 * Set up the HTML header for GMap.
 */
function _gmap_doheader(){
  static $gmap_initialized = FALSE;
  if ($gmap_initialized) {
    return;
  }

  $gmap_path = drupal_get_path('module','gmap');

  drupal_add_css($gmap_path .'/gmap.css');
  drupal_add_js($gmap_path. '/js/gmap.js');
  drupal_set_html_head('<script src="http://maps.google.com/maps?file=api&amp;v='.GMAP_API_V.'&amp;key='.variable_get('googlemap_api_key', '').'" type="text/javascript"></script>');
  $gmap_initialized = TRUE;
}

/**
 * Implementation of hook_perm.
 */
function gmap_perm() {
  return array('create macro');
}

/**
 *
 * Returns the html required to insert a map from a gmap associative array.
 *
 * @param $gmap
 * An associative array with the following variables set:
 *
 *  id - the id of the map every map on a page must have a unique id
 *  width - width of the map
 *  height - height of the map
 *  latitude - a string of the latitude f the centre of the map
 *  longitude - a string of the longitude of the centre of the map (the previous string center still works)
 *  zoom - the zoom factor of the google map
 *  align - the alignment of the map 'right', 'left' or 'center'
 *  control - the control shown on the map 'Large', 'Small', or 'None'
 *  tcontrol - whether the type control is on the map or not: 'off' or 'on'
 *  scontrol - whether the scale control is on the map or not: 'off' or 'on'
 *  ocontrol - width and height of the overview control map: 'width,height'
 *  type - 'Map', 'Hybrid' or 'Satellite'
 *  drag - 'yes' or 'no' map is draggable.  Default is 'yes'
 *  markers - an array of associative arrays for the markers.
 *  shapes - an array of associative arrays for the overlays.
 *  track - a file containing a series of points in .plt format to be
 *  inserted into the node.
 *  feeds - an associative array of rss feeds
 *  wmss - an associative array of WMS services
 *
 *  Xmaps must be enabled for circle and polygon to work.
 *
 * @param $javascript
 * Some javascript to insert into function after drawing the map.
 * note that '{id}' will be replaced with the map id.
 *
 * @return
 * A string with the google map ready to be inserted into a node.
 *
 */
function gmap_draw_map($gmap, $javascript='') {

var_dump(xdebug_get_function_stack());

echo "DRAW_MAP CALLED";

return '';

  global $base_url, $node;
    _gmap_doheader();
    
    if (file_exists('misc/gxmarker.2.js')) {
      $gxmarkerjs=1;
    }
    else {
      $gxmarkerjs=0;
    }

    $defaults = array(
      'autozoom' => FALSE,
      'align' => '',
      'tcontrol' => 'off',
      'scontrol' => 'off',
//    'ocontrol' => 'off',
      'id' => 'map',
      'drag' => 'yes',
    );

      

    // prefer $gmap, then $defaults, then the global defaults..
    $gmap = array_merge(gmap_defaults(),$defaults,$gmap);

    $clusterset=false;

    (!isset($gmap['drag'])) ? $gmap['drag']='yes':NULL;

    if (!isset($gmap['latitude']) && !isset($gmap['center'])&& isset($gmap['latlong'])){
      //backwards compatible with macros created by previous version of this program
      list($gmap['latitude'],$gmap['longitude']) =explode(',',$gmap['latlong']);
    }
    elseif (!isset($gmap['latitude']) && isset($gmap['center'])){
      list($gmap['latitude'],$gmap['longitude']) =explode(',',$gmap['center']);
    }

    $style='width: '.gmap_todim($gmap['width']).'; height: '.gmap_todim($gmap['height']).';';


    switch (strtolower($gmap['align'])) {
      case 'left':
        $style .= ' float: left;';
        break;
      case 'right':
        $style .= ' float: right;';
        break;
      case 'center':
      case 'centre':
        $style .= ' margin-left: auto; margin-right: auto;';
    }

    
// @@@ FIX THIS!
/*'              var mycontrol=null;
              var mytypecontrol=null;
              var '.$gmap['id'].'=null;
              var gxmarkerjs='.$gxmarkerjs.';
              var gmapMarkerLocation="/'.variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'";
              var markerlink='.variable_get('gmap_on_click',0).';
              var bounds = new GLatLngBounds();
';
    if (isset($gmap['wmss'])) {
      $outtext.= '
                 // WMS layers ';
      $outtext.= '
                 '.$gmap['id'].'.getMapTypes().length = 0;';
      $ic=0;
      foreach ($gmap['wmss'] as $item) {
        $map_name = eregi_replace("[^a-z0-9_-]", "_", $item['name']);
        (!isset($item['minresolution'])) ? $item['minresolution']='1': NULL;
        (!isset($item['maxresolution'])) ? $item['maxresolution']='17': NULL;
        (!isset($item['format'])) ? $item['format']='image/gif': NULL;
        (!isset($item['merczoomlevel'])) ? $item['merczoomlevel']='5': NULL;

        $outtext.= '
                 var ccol_'.$map_name.' = new GCopyrightCollection("'.$item['name'].'");
        ';
        if(isset($item['copyrights'])){
          foreach ($item['copyrights'] as $copyright) {
            (!isset($copyright['bounds'])) ? $copyright['bounds']='-190,-90,180,90': NULL;
            (!isset($copyright['minzoom'])) ? $copyright['minzoom']='1': NULL;
            (!isset($copyright['text'])) ? $copyright['text']='': NULL;
            $coords = explode(",", $copyright['bounds']);
            $outtext.= '
                 var sw_'.$ic.' = new GLatLng('.$coords[0].','.$coords[1].',false);
                 var ne_'.$ic.' = new GLatLng('.$coords[2].','.$coords[3].',false);
                 var llb_'.$ic.' = new GLatLngBounds(sw_'.$ic.',ne_'.$ic.');
                 var cr_'.$ic.' = new GCopyright(1,llb_'.$ic.','.$copyright['minzoom'].',"'.$copyright['text'].'");
                 ccol_'.$map_name.'.addCopyright(cr_'.$ic.');
            ';
            $ic++;
          }
        }
        $outtext.= '
                 var t_'.$map_name.'= new GTileLayer(ccol_'.$map_name.','.$item['minresolution'].','.$item['maxresolution'].');
                 t_'.$map_name.'.myMercZoomLevel='.$item['merczoomlevel'].';
                 t_'.$map_name.'.myBaseURL=\''.$item['url'].'\';
                 t_'.$map_name.'.myLayers=\''.$item['layers'].'\';
                 t_'.$map_name.'.myFormat=\''.$item['format'].'\';
                 t_'.$map_name.'.myMapname=\''.$gmap['id'].'\';
                 t_'.$map_name.'.getTileUrl=CustomGetTileUrl;
                 ';
          if(isset($item['opacity'])){
            $outtext.= "t_".$map_name.".myOpacity=".$item['opacity'].";\n                 \n";
            $outtext.= "t_".$map_name.".getOpacity=customOpacity;\n                 \n";
          }
          if(isset($item['overlaywith'])){
            switch (strtolower($item['overlaywith'])) {
              case 'map':
                      $outtext.= "var l_".$map_name."1=[G_NORMAL_MAP.getTileLayers()[0]]; \n                 ";
                break;
              case 'hybrid':
                      //We overlay with roads only, not with the satellite imagery
                      $outtext.= "var l_".$map_name."1=[G_HYBRID_MAP.getTileLayers()[1]]; \n                 ";
                break;
              case 'satellite':
                      $outtext.= "var l_".$map_name."1=[G_SATELLITE_MAP.getTileLayers()[0]]; \n                 ";
                break;
              default:
                      $outtext.= "var l_".$map_name."1=[]; \n                 ";
            }
          }
        $outtext.= 'var l_'.$map_name.'2=[t_'.$map_name.'];';

            switch (strtolower($item['overlaywith'])) {
              case 'hybrid':
              $outtext.= '
                 var l_'.$map_name.'=l_'.$map_name.'2.concat(l_'.$map_name.'1);';
                break;
              default:
              $outtext.= '
                 var l_'.$map_name.'=l_'.$map_name.'1.concat(l_'.$map_name.'2);';
            }

        $outtext.= '                 
                 var m_'.$map_name.' = new GMapType(l_'.$map_name.', G_SATELLITE_MAP.getProjection(), "'.$item['name'].'", G_SATELLITE_MAP); 
                 '.$gmap['id'].'.addMapType(m_'.$map_name.');
                 ';
      }
      $outtext.= '
                 '.$gmap['id'].'.addMapType(G_NORMAL_MAP);
                 '.$gmap['id'].'.addMapType(G_SATELLITE_MAP);
                 '.$gmap['id'].'.addMapType(G_HYBRID_MAP);
                 ';
    }

    $outtext.= $gmap['id'].'.setCenter(new GLatLng('.$gmap['latitude'].','.$gmap['longitude'].'), '.$gmap['zoom'].');
                 ';

    if (strtolower($gmap['tcontrol'])=='on' || strtolower($gmap['tcontrol'])=='yes') {
      $outtext .= $gmap['id'].'.addControl(mytypecontrol=new GMapTypeControl());
                ';
    }
    if (strtolower($gmap['scontrol'])=='on' || strtolower($gmap['scontrol'])=='yes') {
      $outtext .= $gmap['id'].'.addControl(myscalecontrol=new GScaleControl());
                ';
    }
    if (isset($gmap['ocontrol']) && strlen($gmap['ocontrol']) > 0) {
      $osize = explode(",", $gmap['ocontrol']);
      if (intval($osize[0]) > 0 and intval($osize[1]) > 0) {
        $outtext .= $gmap['id'].'.addControl(myovcontrol=new GOverviewMapControl(new GSize('.$osize[0].','.$osize[1].')));
                ';
      }
    }

    if (isset($gmap['drag']) && strtolower($gmap['drag'])=='no') {
      $outtext .= $gmap['id'].".disableDragging(); \n";
    }
    else {
      $outtext .= "keyboardhandler=new GKeyboardHandler(".$gmap['id'].");\n";
    }

    if (isset($gmap['tracks'])) {
      foreach ($gmap['tracks'] as $value) {
        $tt=$value;
        $tt['type']='line';
        $tt['points']=array();
        if($trackFH = fopen($tt['filename'], "r")) {
          while(!feof($trackFH)) {
            $line = fgets($trackFH, 4096);
            $line_exploded = explode(",", $line);
            if(count($line_exploded) == 7) {
              $tt['points'][] = array('latitude' => trim($line_exploded[0]),
                                      'longitude' => trim($line_exploded[1]));
            }
          }
          fclose($trackFH);
        }

        $gmap['shape'][]=$tt;
        
      }
    }

    if (isset($gmap['markers'])) {
      if (GMAP_CLUSTER) {
        $outtext .="\n var clusterer = new Clusterer(".$gmap['id'].");\n";
        $markerfile = $base_url.'/'.variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.variable_get('gmap_cluster_marker', 'cluster').'.png';
        if (file_exists($markerfile)) {
          $outtext .=" clusterIcon = createIcon('$markerfile') \n";
          $outtext .=" clusterer.SetIcon(clusterIcon);\n";
        }
        $outtext .=" clusterer.SetMaxVisibleMarkers(".variable_get('gmap_cluster_max_markers', 150).");\n";
        $outtext .=" clusterer.SetMinMarkersPerCluster(".variable_get('gmap_cluster_min_per_cluster', 5).");\n";
        $outtext .=" clusterer.SetMaxLinesPerInfoBox(".variable_get('gmap_cluster_max_lines', 10).");\n\n";
        $clusterset=true;
      }
      $lastmarker='';
      foreach ($gmap['markers'] as $item) {
        $mymarker='';
        $mytext='';
        if (isset($item['markername'])){
          if ($item['markername']==$lastmarker) {
            $i++;
          }
          else {
            $lastmarker=$item['markername'];
            $i=1;
          }
          if (file_exists(variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].$i.'.png')) {
            $mymarker=$base_url.'/'.variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].$i.'.png';
          }
          elseif (file_exists(variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].'.png')) {
            $mymarker=$base_url.'/'.variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].'.png';
          }
        }
        if (isset($item['text']) && strlen(trim($item['text']))>0) {
          $mytext=$item['text'];
        }
        elseif (isset($item['label']) && strlen(trim($item['label']))>0) {
          $mytext=$item['label'];
        }
        $divstyle='';
        if (isset($item['winwidth']) && trim($item['winwidth']) != '') {
          $divstyle='width: '.$item['winwidth'].'; ';
        }
        if (strlen($divstyle) >0 && strlen(trim($mytext))>0) {
          $mytext = '<div class="gmap-popup" style="'.$divstyle.'">'.$mytext.'</div>';
        }
        elseif (strlen(trim($mytext))>0){
          //special line to insert nodeid into text.
          //$mytext=str_replace('##NODE##', $node->nid, $mytext);
          $mytext = '<div class="gmap-popup">'.$mytext.'</div>';
        }
        else {
          $mytext='';
        }
        if (isset($item['tooltip'])) {
          $tooltip=check_plain($item['tooltip']);
        }
        else {
          $tooltip='';
        }
        if (isset($item['link'])) {
          $link=$item['link'];
        }
        else {
          $link='';
        }
        if (GMAP_CLUSTER) {
          $outtext .='clusterer.AddMarker(createGMarker(new GLatLng('.$item['latitude'].','.$item['longitude'].'),\''.$mytext.'\',\''.$mymarker."','$tooltip','$link'),'".l($tooltip,$base_url.$link)."');\n";
          $clusterset=true;
        }
        else {
          $outtext .=$gmap['id'].'.addOverlay(createGMarker(new GLatLng('.$item['latitude'].','.$item['longitude'].'),\''.$mytext.'\',\''.$mymarker."','$tooltip','$link'));\n";
          if($gmap['autozoom']){
            $outtext .='bounds.extend(new GLatLng('.$item['latitude'].','.$item['longitude'].'));'."\n";
          }
        }
      }
    }
    if ($gmap['autozoom']){
      $outtext .= 'var center_lat = (bounds.getNorthEast().lat() + bounds.getSouthWest().lat()) / 2.0;
                   var center_lng = (bounds.getNorthEast().lng() + bounds.getSouthWest().lng()) / 2.0;
                   var center = new GLatLng(center_lat,center_lng);
                   var zoom = '.$gmap['id'].'.getBoundsZoomLevel(bounds);
                   '.$gmap['id'].'.setCenter(center,zoom);';
    }
    if (isset($gmap['shape']) && !variable_get('gmap_xmaps',0)) {
      //if xmaps is not enabled then just show the lines using straight google maps.
      foreach ($gmap['shape'] as $value) {
        $style ='';
        if (trim($value['type'])=='line') {
          if (isset($value['color'])) {
            $style .=",'".$value['color']."'";
            if (isset($value['width'])) {
              $style .=','.$value['width'];
              if (isset($value['opacity'])) {
                $style .=','.$value['opacity'];
              }
            }
          }
//          $linetxt ='new GLatLng('.implode('), new GLatLng(',$value['latitude'].','.$value['longitude']).')';
          $linetxt='';
          foreach ($value['points'] as $lvalue) {
            if (strlen($linetxt)>0) {
              $linetxt .= ', ';
            }
            $linetxt .="new GLatLng(".$lvalue['latitude'].','.$lvalue['longitude'].")";
          }
          $outtext .="\n".$gmap['id'].".addOverlay(new GPolyline([$linetxt] $style));";
        }
      }
    }
    elseif (isset($gmap['shape'])) {
      foreach ($gmap['shape'] as $value) {
        $linestyle=array();
        $fillstyle=array();
        if (isset($value['color'])){
          $linestyle[] = 'color: "'.$value['color'].'" ';
        }
        if (isset($value['width'])){
          $linestyle[] = 'weight: '.$value['width'];
        }
        if (isset($value['opacity'])){
          $linestyle[] = 'opacity: '.$value['opacity'];
        }
        if (isset($value['pattern'])){
          $linestyle[] = 'pattern: ['.$value['pattern'].'] ';
        }
        if (isset($value['text'])){
          $linestyle[] = 'text: "'.$value['text'].'" ';
        }
        if (isset($value['fillcolor'])){
          $fillstyle[] = 'color: "'.$value['fillcolor'].'" ';
        }
        if (isset($value['fillopacity'])){
          $fillstyle[] = 'opacity: '.$value['fillopacity'];
        }
        $outtext .= 'var lineStyle = {'.implode(',',$linestyle)."};\n";
        if (count($fillstyle)>0) {
          $outtext .= 'var fillStyle = {'.implode(',',$fillstyle)."};\n";
        }
        else {
          $outtext .= "var fillStyle = null;\n";
        }

        switch ($value['type']) {
          case 'line':
            $outtext .= "var points = []; \n";

            foreach ($value['points'] as $lvalue) {
              $outtext .="points.push(new GPoint(".$lvalue['latitude'].','.$lvalue['longitude']."));\n";
            }
            $outtext .= $gmap['id'].".addOverlay(new XPolyline(points, lineStyle));\n";
            break;
          case 'circle':
            //create a circle by using a radius in km
            if (empty($value['sides'])){
              $value['sides']=36;
            }
            $outtext .= 'var radius = new XDistance('.$value['radius'].",XDistance.KM);\n";
            $outtext .= 'var centre = new GPoint('.$value['center'].");\n";
            $outtext .= $gmap['id'].".addOverlay(XPolygon.createRegularPolygonFromRadius(centre, radius, ".$value['sides'].", 0, lineStyle, fillStyle));\n";
            break;
          case 'rpolygon':
            if (isset($value['sides'])){
              $value['sides']=36;
            }
            $outtext .= "var centre = new GPoint(".$value['center'].");\n";
            $outtext .= $gmap['id'].".addOverlay(XPolygon.createRegularPolygonFromPoint( new GPoint(".$value['center']."), new GPoint(".$value['point']."), 36, lineStyle, fillStyle));\n";
            break;
          case 'polygon':
            $outtext .= "var points=[];\n";
            foreach ($value['points'] as $pvalue) {
              $outtext .= "points.push(new GPoint($pvalue));\n";
            }
            $outtext .= $gmap['id'].".addOverlay(new XPolygon(points, lineStyle, fillStyle));\n";
        }
      }
    }
    if (isset($gmap['feeds'])) {
//      if (GMAP_CLUSTER && !$clusterset) {
//        $outtext .="\n var clusterer = new Clusterer(".$gmap['id'].");\n";
 //     }
      foreach ($gmap['feeds'] as $item) {
        $mymarker='';
        if (isset($item['markername'])){
          if (file_exists(variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].'.png')) {
            $mymarker=$base_url.'/'.variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap') .'/markers').'/'.$item['markername'].'.png';
          }
        }
        if (isset($item['url'])) {
          $outtext.= "parseGeoRSS(".$gmap['id'].",'".$item['url']."','$mymarker');\n";
        }
      }
    }

    if (strlen($javascript)>0) {
      $javascript=str_replace('{id}',$gmap['id'],$javascript);
      $outtext .=$javascript;
    }
    $outtext .="\n } \n   //]]>
               </script>";
    return $outtext;


 */
}

/**
 *
 * Cleans the gmap variables to prevent javascript interjection
 *
 * @param $gmap
 * A Gmap variable
 *
 * @return
 * A GMap variable with any dangerous text removed.
 *
 * This does not really do much of anything right now.
 */
function gmap_sanitize(&$gmap){
  //sanitizes the gmap variables to reduce the possibility of javascript inserts
  foreach ($gmap as $key=>$value) {
    if ($key=='id') {
      $out = array();
      preg_match('([a-zA-Z1-9_-]*)', $value, $out);
      if (strlen($out[0])==0)  {
        $out[0]='map';
      }
      $gmap[$key]=$out[0];
    }
    else {
      $gmap[$key]=str_replace(';','',$value);
    }
  }
}

/**
 *
 * Returns a variable based on .
 *
 * @param $instring
 * A string with the settings of gmap insertion in the format var=setting|var2=setting2
 *  The possible variables are
 *  id - the id of the map every map on a page must have a unique id
 *  width - width of the map
 *  height - height of the map
 *  center - a string of the longitude and latitude of the centre of the map
 *  zoom - the zoom factor of the google map
 *  align - the alignment of the map 'right', 'left' or 'center'
 *  control - the control shown on the map 'Large', 'Small', or 'None'
 *  type - 'Map', 'Hybrid' or 'Satellite'
 *  points/markers - a string of points to mark on the map with + between
 *          each point
 *  line - the line is defined by a set of points separated by a +
 *  track - Draws a line based on the points in the .plt file
 *  The following shape types require XMaps:
 *  circle - a circle based on a center point and a radius in km separated
 *          by a + and optionally can include the number of sizes.
 *  rpolygon - a regular polygon is defined by the center point and a point
 *          on the permiter separated by a +
 *  polygon - a polygon is defined by a set of points
 *
 *  Each of the shapes types can optionally have charecteristics of colour,
 *  width, opacity, pattern, text, fill colour, fill opacity.  Pattern, text
 *  and fill are all only used by xmaps.
 *      color - hexadecimal for the colour include the '#'
 *
 *
 * @return
 * A string with the google map ready to be inserted into a node.
 *
 */
function gmap_parse_macro($instring,$ver=2) {

  // Remove leading and trailing tags
  if (substr(trim($instring),-1)==']') {
    $instring=substr(trim($instring), 0, -1);
  }
  if (substr($instring, 0,5)=='[gmap') {
    $instring=substr($instring, 6);
  }

  // Chop the macro into an array
  $temp = explode('|',$instring);
  $m = array();
  foreach ($temp as $row) {
    $r = explode('=',$row);
    // Things that can appear multiple times
    if (in_array(trim($r[0]),array('points','markers'))) {
      $m[trim($r[0])][] = trim($r[1]);
    }
    else {
      $m[trim($r[0])] = trim($r[1]);
    }
  }

  $m['lines'] = array();
  $m['delme'] = array(); // List of keys to delete.

  // Look for keys needing handling
  reset($m);
  while (list($k,$v) = each($m)) {

    // Put all lines in the line array.
    if((strpos($k,'line')===0) && $k!='lines') {
      $m['lines'][intval(substr($k,4))-1] = _gmap_str2points($v);
      $m['delme'][] = $k;
    }
  }
  // Clean up unneeded elements.
  foreach($m['delme'] as $k => $v) {
    unset($m[$v]);
  }
  unset($m['delme']);


  // Merge points and markers
  $m['markers-temp'] = array_merge($m['points'],$m['markers']);
  unset($m['points']);
  unset($m['markers']);

  // Version 1 -> 2 conversion
  if ($ver==1) {
    // Zoom is flipped
    if ($m['zoom']) {
      $m['zoom'] = 18 - $m['zoom'];
      if ($m['zoom'] < 1) {
        $m['zoom'] = 1;
      }
    }
  }

  // Center -> latitude and longitude
  if ($m['center']) {
    list($m['latitude'],$m['longitude']) = explode(',',$m['center']);
    unset($m['center']);
  }

  // Markers fixup
  foreach ($m['markers-temp'] as $t) {
    unset($markername);
    // Named?
    if(strpos($t,'::')) { // Single : gets handled below.
      list($markername,$t) = explode('::',$t,2);
    }
    // Break down into points
    $points = explode('+',$t);
    $offset = 0;
    foreach ($points as $point) {
      $marker = array();
      $offset++;
      // Labelled?
      if (strpos($point,':')) {
        list($point,$marker['label']) = explode(':',$point,2);
      }
      list($marker['latitude'],$marker['longitude']) = explode(',',$point,2);
      // Named markers get an offset too.
      if (isset($markername)) {
        $marker['markername'] = $markername;
        $marker['offset'] = $offset;
      }
      $m['markers'][] = $marker;
    }
  }
  unset($m['markers-temp']);


/*      case 'track':
        $tt['color']=GMAP_LINECOLOR1;
        if (strpos($t[1],':')) { // note: we don't care about case starting with ':'
          list($configs,$t[1])=explode(':',$t[1],2);
          list($tt['color'],$tt['width'],$tt['opacity'],$tt['pattern'],$tt['text'])=explode('/',$configs);
        }
        $tt['filename'] =$t[1];
        $gmap['tracks'][] = $tt;
        break;
        
      case 'feed':
        if (strpos($t[1],'::')) { // note: we don't care about case starting with ':'
          list($markername,$t[1])=explode('::',$t[1],2);
        }
        $tt['url'] =$t[1];
        if (isset($markername)){
          $tt['markername']=$markername;
        }
        $gmap['feeds'][] = $tt;
        break;

      case 'wmss':
        unset($ttt);
        $ttt = explode('+',$t[1]);
        for ($i =0; $i<count($ttt); $i++) {
          unset($tt);
          list($tt['name'],$tt['url'],$tt['format'],$tt['layers'],$tt['minresolution'],$tt['maxresolution'],$tt['copyrights'],$tt['overlaywith'],$tt['merczoomlevel'],$tt['opacity'])=explode('::',$ttt[$i]);
          $crr = explode('/',$tt['copyrights']);
          unset($tt['copyrights']);
          for ($k =0; $k<count($crr); $k++) {
            unset($cr);
            list($cr['minzoom'],$cr['bounds'],$cr['text'])=explode(':',$crr[$k]);
            $tt['copyrights'][]=$cr;
          }
          $gmap['wmss'][]=$tt;
        }
        break;

      case 'line1':
        $tt['color']=GMAP_LINECOLOR1;
      case 'line2':
        if (empty($tt['color'])){
          $tt['color']=GMAP_LINECOLOR2;
        }
      case 'line3':
        if (empty($tt['color'])){
          $tt['color']=GMAP_LINECOLOR3;
        }
      case 'line':
        if (strpos($t[1],':')) { // note: we don't care about case starting with ':'
          list($configs,$t[1])=explode(':',$t[1],2);
          list($tt['color'],$tt['width'],$tt['opacity'],$tt['pattern'],$tt['text'])=explode('/',$configs);
        }
        $tt['points'] = explode('+',$t[1]);
        foreach ($tt['points'] as $key=>$value) {
          $tt['points'][$key]=gmap_dopoint($value,$ver);
        }

        $tt['type'] = 'line';
        $gmap['shape'][] = $tt;
        break;

      case 'rpolygon':
        if (strpos($t[1],':')) { // note: we don't care about case starting with ':'
          list($configs,$t[1])=explode(':',$t[1],2);
          list($tt['color'],$tt['width'],$tt['opacity'],$tt['pattern'],$tt['text'],$tt['fillcolor'],$tt['fillopacity'])=explode('/',$configs);
        }
        list($tt['center'],$tt['point'],$tt['sides']) = explode('+',$t[1]);
        $tt['type']='rpolygon';
        $gmap['shape'][] = $tt;
        break;

      case 'circle':
        if (strpos($t[1],':')) { // note: we don't care about case starting with ':'
          list($configs,$t[1])=explode(':',$t[1],2);
          list($tt['color'],$tt['width'],$tt['opacity'],$tt['pattern'],$tt['text'],$tt['fillcolor'],$tt['fillopacity'])=explode('/',$configs);
        }
        list($tt['center'],$tt['radius'],$tt['sides'])= explode('+',$t[1]);
        $tt['type']='circle';
        $gmap['shape'][] = $tt;
        break;

      case 'polygon':
        $tt['color']=GMAP_LINECOLOR1;
        if (strpos(':',$t[1])) { // note: we don't care about case starting with ':'
          list($configs,$t[1])=explode(':',$t[1],2);
          list($tt['color'],$tt['width'],$tt['opacity'],$tt['pattern'],$tt['text'],$tt['fillcolor'],$tt['fillopacity'])=explode('/',$configs);
        }
        $tt['points'] = explode('+',$t[1]);
        $tt['type']='polygon';
        $gmap['shape'][] = $tt;
        break;

      case 'control':
        $gmap['controltype'] = trim($t[1]);
        break;

      case 'type':
        $gmap['maptype'] = trim($t[1]);
        break;

      default:
        $gmap[trim($t[0])] = trim($t[1]);
      }
    $j++;
  }
  gmap_sanitize($gmap);
  return $gmap;
*/

  return $m;
}

/**
 * Parse a set of points in string format
 */
function _gmap_str2points($str) {
  // Explode along + axis
  $arr = explode(' + ',$str);
  // Explode along , axis
  $points = array();
  foreach($arr as $pt) {
    list($lat,$lon) = explode(',',$pt);
    $points[] = array(
      'latitude' => trim($lat),
      'longitude' => trim($lon),
    );
  }
  return $points;
}

/**
 *
 * Creates a map that can be interactively used to fill a form with a
 * location (latitude, longitude and zoom level)
 *
 * @param $map
 * Either a macro to use as the base map for setting a location, or an already set map associative array.
 * @param $form
 * A formset associative array.  Cannot be more than one deep.
 * @param $fields
 * An associative array for the field names.  'latitude', 'longitude'=>name of respective array, 'address' is optional.
 * @return
 * A string with the google map code to be inserted onto the page.
 *
 */
function gmap_set_location($map,&$form,$fields) {
echo "FOO!";
  if (!is_array($map)){
    $map=gmap_parse_macro($map);
  }
  $zoom=$map['zoom'];

  $form[$fields['latitude']]['#id']='gmap-'.$map['id'].'-latitude';
//  $form[$fields['latitude']]['#attributes']=array('onchange'=>'gmap_textchange('.$map['id'].');');
  $form[$fields['longitude']]['#id']='gmap-'.$map['id'].'-longitude';
//  $form[$fields['longitude']]['#attributes']= array('onchange'=>'gmap_textchange('.$map['id'].');');
  if (isset($fields['address'])) {
    $form[$fields['address']]['#id']='gmap-'.$map['id'].'-address';
//    $form[$fields['address']]['#attributes']= array('onchange'=>'gmap_geocodeaddress('.$map['id'].', this.value);');
  }

/*  if ($form[$fields['latitude']]['#default_value']!=0 || $form[$fields['longitude']]['#default_value']!=0) {
    $myjava .= '{id}.panTo(new GLatLng('.$form[$fields['latitude']]['#default_value'].', '.$form[$fields['longitude']]['#default_value'].'));'."\n".
             '{id}.addOverlay(thispoint=new GMarker(new GLatLng('.$form[$fields['latitude']]['#default_value'].', '.$form[$fields['longitude']]['#default_value'].')));'."\n";
  }

  $myjava .=  '   GEvent.addListener({id}, "click", function(overlay, point) {
                  {id}.checkResize();
                  if (point) {
                    {id}.zoomIn();
                    {id}.zoomIn();
                    if (thispoint) {
                      {id}.removeOverlay(thispoint);
                    }
                    {id}.addOverlay(thispoint=new GMarker(point));

                    $("gmap-latitude").value=point.lat();
                    $("gmap-longitude").value=point.lng();
                    {id}.panTo(point);
                  }
                  else {
                    {id}.removeOverlay(thispoint);
                    $("gmap-latitude").value="";
                    $("gmap-longitude").value="";
                    thispoint=null;
                  }
                });
               // GEvent.addListener({id}, "dragend", function() {{id}.checkResize();} )
              ';
*/
  $out = gmap_draw_map($map,$myjava);
  

  return $out;
}


function _gmap_prepare($intext) {
  $out = FALSE;
  $mapexp = '/\[gmap([^\[\]]+ )* \] /x';
  $matches = array();
  preg_match_all($mapexp, $intext, $matches);
  $i = 0;

  while (isset($matches[1][$i])) {
    $out[0][$i] = $matches[0][$i];
    if ($matches[1][$i][0]=='1'){
      $ver=1;
      $matches[1][$i]=substr($matches[0][$i],1);
    }
    else {
      $ver=2;
    }
    $out[1][$i] = theme('gmap',array('#settings'=>gmap_parse_macro($matches[1][$i],$ver)));
    $i++;
  } // endwhile process macro
  return $out;
}

function gmap_todim($instring) {
  if (strpos($instring,'%')) {
    return intval($instring).'%';
  }
  else {
    return intval($instring).'px';
  }
}

function gmap_dopoint($point,$ver) {
  if ($ver==1) {
    $lonlat=explode(',',$point,2);
    return array('latitude'=>$lonlat[1],'longitude'=>$lonlat[0]);
  }
  else {
    $lonlat=explode(',',$point,2);
    return array('latitude'=>$lonlat[0],'longitude'=>$lonlat[1]);
  }
}

function gmap_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return (array(0 => t('GMap filter')));

    case 'name':
      return t('Google map filter');

    case 'description':
      return t('converts a google map  macro into the html required for inserting a google map.');

    case 'process':
      $gmaps=_gmap_prepare($text);   //returns an array of $tables[0] = table macro $table[1]= table html
      if ($gmaps) {                    // there are table macros in this node
        return str_replace($gmaps[0], $gmaps[1], $text);
      }
      else {
        return $text;
      }

    case 'prepare':
      return $text;

    case 'no cache':
      return (variable_get('gmap_method', 'Static')=='Dynamic');
  }
}

function gmap_filter_tips($delta, $format, $long = false) {

  if(user_access('create macro')) { // only display macro if user can create one
    return t('Insert Google Map macro.').'<a href="'.url('map/macro').'" target="_blank" >'.t('Create a macro').'</a>';
  }
  else {
    return t('Insert Google Map macro.');
  }
}

function gmap_menu($may_cache) {
  $items=array();

  if ($may_cache) {
/*    $items[] = array(
      'path' => 'map',
      'type' => MENU_ITEM_GROUPING,
      'title' => t('google maps'),
      'access' => user_access('create macro')||user_access('show user map')||user_access('show node map'),
    );  */
    $items[] = array(
      'path' => 'admin/settings/gmap',
      'title' => t('GMap'),
      'description' => t('Configure GMap settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'gmap_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'map/macro',
      'type' => MENU_NORMAL_ITEM,
      'title' => t('Build a GMap macro'),
      'access' => user_access('create macro'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'gmap_macro_form',
    );
  }
/*  if (!$may_cache && (strlen(variable_get('googlemap_api_key', '')) > 0)) {
    if (variable_get('gmap_method', 'Static')=='Static') {
      _gmap_doheader();
    }
  }*/
  return $items;
}

function gmap_admin_settings() {
  //note the same google api key variable name as in the googlemap module is used
  //note the name of the variable for center of the map is latlong although the format is actually longitude, latitude

  $form['initialization'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Map Initialize'),
  );
  $form['initialization']['googlemap_api_key'] = array(
    '#type' => 'textfield', 
    '#title' => t('Google map API key'),
    '#default_value' => variable_get('googlemap_api_key', ''), 
    '#size' => 50, 
    '#maxlength' => 255,
    '#description' => t('Your personal Googlemaps API key.  You must get this for each separate website at <a href="http://www.google.com/apis/maps/">Google Map API website</a>.'),
  );
  $form['initialization']['gmap_method'] = array(
    '#type' => 'select',
    '#title' => t('Google map method'),
    '#options'=> array('Static'=>t('Static'), 'Dynamic'=>t('Dynamic'), 'None'=>t('None')),
    '#default_value' => GMAP_LOAD_METHOD,
    '#description' => t('How is the Google Map initialization script run:<br /><strong>Static</strong> - Loaded on every page, <br /><strong>Dynamic</strong> - Initialization script runs only on pages with google maps, but all pages with the gmap filter will not be cached. <br /><strong>None</strong> - Google map initialization script must be loaded some other way.'),
  );
  $form['initialization']['gmap_wms'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable wms features'),
    '#default_value' => GMAP_WMS,
    '#description' => t('Enables the wms features.  This allows you to use overlays that are defined using wms.  The wms-gs.js (or other acceptable version) must be installed in the gmap directory.'),
  );
  $form['initialization']['gmap_on_click'] = array(
    '#type' => 'radios',
    '#title' => t('On Click Marker'),
    '#default_value' => variable_get('gmap_on_click',0),
    '#options' => array(t('Open info window'), t('Open link')),
    '#description' => t('For markers that have link associated with them, it can either an info window or go directly to the link.'),
  );

  $defaults = gmap_defaults();

  $form['gmap_default'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default map settings'),
    // This will store all the defaults in one variable.
    '#tree' => TRUE,
  );
  $form['gmap_default']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default width'),
    '#default_value' => $defaults['width'],
    '#size' => 25,
    '#maxlength' => 6,
    '#description' => t('The default width of a Google map.'),
  );
  $form['gmap_default']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Default height'),
    '#default_value' => $defaults['height'],
    '#size' => 25,
    '#maxlength' => 6,
    '#description' => t('The default height of a Google map.'),
  );
  $form['gmap_default']['latlong'] = array(
    '#type' => 'textfield',
    '#title' => t('Default center'),
    '#default_value' => $defaults['latlong'],
    // @@@ This gets overwritten right away. Move into the help hook or something.
    '#description' => t('The decimal latitude,longitude of the centre of the map. The "." is used for decimal, and "," is used to separate latitude and longitude.'),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('The default longitude, latitude of a Google map.'),
  );
  $form['gmap_default']['zoom'] = array(
    '#type' => 'select',
    '#title' => t('Default zoom'),
    '#default_value' => $defaults['zoom'],
    '#options' => drupal_map_assoc(range(0, 17)),
    '#description' => t('The default zoom level of a Google map.'),
  );
  $form['gmap_default']['controltype'] = array(
    '#type' => 'select',
    '#title' => t('Default control type'),
    '#default_value' => $defaults['controltype'],
    '#options' => array('None' => t('None'),'Small' => t('Small'),'Large' => t('Large')),
  );
  $form['gmap_default']['maptype'] = array(
    '#type' => 'select',
    '#title' => t('Default map type'),
    '#default_value' => $defaults['maptype'],
    '#options' => array('Map' => t('Map'),'Satellite' => t('Satellite'),'Hybrid' => t('Hybrid')),
  );

  $form['gmap_default']['behavior'] = array(
    '#type' => 'fieldset',
    '#title' => t('Behavior'),
    '#tree' => TRUE,
  );
  $form['gmap_default']['behavior']['nodrag'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable dragging'),
    '#default_value' => $defaults['behavior']['nodrag'],
    '#description' => t('If checked, disables dragging the map around. Also disables the keyboard handler.'),
  );
  $form['gmap_default']['behavior']['nokeyboard'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable keyboard handler'),
    '#default_value' => $defaults['behavior']['nokeyboard'],
    '#description' => t('If checked, disables the GKeyboardHandler normally attached to a map.'),
  );
  $form['gmap_default']['line_colors'] = array(
    '#tree' => TRUE,
  );
  $form['gmap_default']['line_colors'][0] = array(
    '#type' => 'textfield',
    '#title' => t('Default Line 1 Color'),
    '#default_value' => $defaults['line_colors'][0],
    '#size' => 12,
    '#maxlength' => 7,
  );
  $form['gmap_default']['line_colors'][1] = array(
    '#type' => 'textfield',
    '#title' => t('Default Line 2 Color'),
    '#default_value' => $defaults['line_colors'][1],
    '#size' => 12,
    '#maxlength' => 7,
  );
  $form['gmap_default']['line_colors'][2] = array(
    '#type' => 'textfield',
    '#title' => t('Default Line 3 Color'),
    '#default_value' => $defaults['line_colors'][2],
    '#size' => 12,
    '#maxlength' => 7,
  );

  $markers = gmap_get_markers();

  $form['clusterer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Clusterer settings'),
  );
  $form['clusterer']['gmap_cluster'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable clusterer.js'),
    '#default_value' => GMAP_CLUSTER,
    '#description' => t('Enables Jef Poskanzer\'s excellent <a href="http://www.acme.com/javascript/#Clusterer">clusterer.js</a> script. (useful for a large number of markers on a single map).  This must be installed in the gmap directory of the drupal install.'),
  );
  $form['clusterer']['gmap_cluster_marker'] = array(
    '#type' => 'select',
    '#title' => t('Marker for clusters'),
    '#default_value' => variable_get('gmap_cluster_marker', 'cluster'),
    '#options' => $markers,
  );
  $form['clusterer']['gmap_cluster_max_markers'] = array(
    '#type' => 'textfield',
    '#title' => t("Maximum number of markers"),
    '#default_value' => variable_get('gmap_cluster_max_markers', 150),
    '#size' => 3,
    '#maxlength' => 3,
    '#title' => t("Clustering is enabled when more than the specified number of markers are visible at the same time."),
  );
  $form['clusterer']['gmap_cluster_min_per_cluster'] = array(
    '#type' => 'textfield',
    '#title' => t("Minimal number of markers per cluster"),
    '#default_value' => variable_get('gmap_cluster_min_per_cluster', 5),
    '#size' => 2,
    '#maxlength' => 2,
  );
  $form['clusterer']['gmap_cluster_max_lines'] = array(
    '#type' => 'textfield',
    '#title' => t("Maximum number of lines per info box"),
    '#default_value' => variable_get('gmap_cluster_max_lines', 10),
    '#size' => 2,
    '#maxlength' => 2,
  );

  $form['location'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location settings'),
  );
  $form['location']['gmap_location_map'] = array(
    '#type' => 'textfield',
    '#title' => t('Default location map'),
    '#default_value' => variable_get('gmap_location_map','[gmap|id=locmap|center=40,0|zoom=3|width=100%|height=400px]'),
    '#size' => 50,
    '#description' => t('The gmap macro for the map to be used in the location.module for setting latitude and longitude.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_elements().
 */
function gmap_elements() {
  return array(
    'gmap' => array(
      '#input' => FALSE, // This isn't a *form* input!!
      '#id' => 'map',
      '#settings' => array_merge(gmap_defaults(),array(
        'id' => 'map', // @@@ I hate this.
        'points' => array(),
        'pointsOverlays' => array(),
        'line1' => array('overlay' => null, 'points' => null, 'line' => ""),
        'line2' => array('overlay' => null, 'points' => null, 'line' => ""),
        'line3' => array('overlay' => null, 'points' => null, 'line' => ""),
      )),
      '#process' => array('expand_gmap' => array()),
    ),
    'gmap_macrotext' => array('#input' => TRUE, '#cols' => 60, '#rows' => 5, '#process' => array('process_gmap_macrotext' => array())),
    'gmap_overlay_edit' => array('#input' => FALSE, '#process' => array('process_gmap_overlay_edit' => array())),
    'gmap_address' => array('#input' => TRUE, '#process' => array('process_gmap_address' => array())),
    'gmap_align' => array('#input' => TRUE, '#process' => array('process_gmap_align' => array())),
    'gmap_latitude' => array('#input' => TRUE, '#process' => array('process_gmap_latitude' => array())),
    'gmap_longitude' => array('#input' => TRUE, '#process' => array('process_gmap_longitude' => array())),
    'gmap_latlon' => array('#input' => TRUE, '#process' => array('process_gmap_latlon' => array())),
  );
}

/**
 * Gmap element process hook
 */
function expand_gmap($element) {
  $element['#settings'] = array_merge(gmap_defaults(),array(
    'id' => 'map', // @@@ I hate this.
    'points' => array(),
    'pointsOverlays' => array(),
    'line1' => array('overlay' => null, 'points' => null, 'line' => ""),
    'line2' => array('overlay' => null, 'points' => null, 'line' => ""),
    'line3' => array('overlay' => null, 'points' => null, 'line' => ""),
  ),$element['#settings']);
  return $element;
}

/**
 * Set up the macro element.
 */
function process_gmap_macrotext($element) {
  $element['#type'] = 'textarea';
  $element['#id'] = 'gmap-'.$element['#map'].'-macrotext';
  $element['#attributes']['class'] .= ' gmap-control';
  $element['#theme'] = 'gmap_macrotext';
  return $element;
}

function process_gmap_latitude($element) {
  $element['#type'] = 'textarea';
  $element['#id'] = 'gmap-'.$element['#map'].'-latitude';
  $element['attributes']['class'] .= ' gmap-control';
  $element['#theme'] = 'gmap_coord';
  return $element;
}

function process_gmap_longitude($element) {
  $element['#type'] = 'textarea';
  $element['#id'] = 'gmap-'.$element['#map'].'-longitude';
  $element['attributes']['class'] .= ' gmap-control';
  $element['#theme'] = 'gmap_coord';
  return $element;
}

function process_gmap_latlon($element) {
  $element['#type'] = 'textarea';
  $element['#id'] = 'gmap-'.$element['#map'].'-latlon';
  $element['attributes']['class'] .= ' gmap-control';
  $element['#theme'] = 'gmap_coord';
  return $element;
}

function process_gmap_overlay_edit($element) {
  $element['#type'] = 'select';
  $element['#id'] = 'gmap-'.$element['#map'].'-overlayedit';
  $element['#attributes']['class'] .= ' gmap-control';
  $element['#options'] = drupal_map_assoc(array('Points', 'Line1', 'Line2', 'Line3'));
  $element['#default_value'] = 'Points';
  $element['#theme'] = 'gmap_overlay_edit';
  return $element;
}

function process_gmap_align($element) {
  $element['#type'] = 'select';
  $element['#id'] = 'gmap-'.$element['#map'].'-align';
  $element['#attributes']['class'] .= ' gmap-control';
  $element['#options'] = drupal_map_assoc(array('None', 'Right', 'Left', 'Center'));
  $element['#theme'] = 'gmap_align';
  return $element;
}

function process_gmap_address($element) {
  $element['#type'] = 'textfield';
  $element['#id'] = 'gmap-'.$element['#map'].'-address';
  $element['#attributes']['class'] .= ' gmap-control';
  $element['#theme'] = 'gmap_address';
  return $element;
}

function theme_gmap_overlay_edit($element) {
  drupal_add_js(drupal_get_path('module','gmap') .'/js/overlay_edit.js');
  return theme('select',$element);
}

function theme_gmap_coord($element) {
  //drupal_add_js
  return theme('textfield',$element);
}

function theme_gmap_macrotext($element) {
  drupal_add_js(drupal_get_path('module','gmap') .'/js/macro.js');
  return theme('textarea',$element);
}

function theme_gmap_address($element) {
  drupal_add_js(drupal_get_path('module','gmap') .'/js/address.js');
  return theme('textfield',$element);
}

function theme_gmap_align($element) {
  drupal_add_js(drupal_get_path('module','gmap') .'/js/align.js');
  return theme('select',$element);
}

/**
 * Gmap element theme hook
 */
function theme_gmap($element) {
  _gmap_doheader();

  $map = array_merge(gmap_defaults(),$element['#settings']);
  $element['#attributes']['class'] = trim(implode(' ',array($element['#attributes']['class'],'gmap','gmap-map')));
  if (!isset($element['#id'])) {
    $element['#id'] = $map['id'];
  }
  if (!isset($map['id'])) {
    $map['id'] = $element['#id'];
  }
  $o = '<div id="gmap-'.$element['#id'].'-gmap" style="width: '.$map['width'].'; height: '.$map['height'].';" class="'.$element['#attributes']['class'].'"></div>';

  // Google is picky about this one.
  $map['zoom'] = (int)$map['zoom'];

  drupal_add_js(drupal_get_path('module','gmap') .'/js/gmap.js');
  //@@@
  drupal_add_js(drupal_get_path('module','gmap') .'/js/gmap_marker.js');
//  drupal_add_js(drupal_get_path('module','gmap') .'/georss.js');

  // Inline settings extend.
  $o .= '<script type="text/javascript">Drupal.extend({ settings: '.drupal_to_js(array('gmap' => array($element['#id'] => $map)))." });</script>\n"; 
//  $o .= drupal_add_js(array('gmap' => array($element['#id'] => $map)),'setting','inline');
  return $o;
}

function gmap_macro_form() {
  $form['macroform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gmap macro creation'),
    '#theme' => 'gmap_macro',
  );

  $form['macroform']['mapdiv'] = array(
    '#type' => 'gmap',
    '#id' => 'map',
    '#settings' => array(
      'points' => array(),
      'pointsOverlays' => array(),
    ),
  );

  $defaults = gmap_defaults();

  $form['macroform']['mapid'] = array(
    '#type' => 'textfield',
    '#id' => 'gmap-map-mapid',
    '#title' => t('Map id attribute'),
    '#default_value' => variable_get('gmap_default_mapid', 'map'),
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['maptype'] = array(
    '#type' => 'select', 
    '#id' => 'gmap-map-maptype',
    '#title' => t('Map type'), 
    '#options' => drupal_map_assoc(array('Map', 'Satellite', 'Hybrid')), 
    '#default_value' => $defaults['maptype'],
    '#required' => FALSE,
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['controltype'] = array(
    '#type' => 'select', 
    '#id' => 'gmap-map-controltype',
    '#title' => t('Controls'), 
    '#options' => drupal_map_assoc(array('None', 'Small', 'Large')), 
    '#required' => FALSE,
    '#default_value' => $defaults['controltype'],
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['address'] = array(
    '#type' => 'gmap_address',
    '#map' => 'map',
    '#title' => t('Address'),
    '#default_value' => '',
  );
  $form['macroform']['latlong'] = array(
    '#type' => 'textfield',
    '#id' => 'gmap-map-latlong',
    '#title' => t('The Latitude and Longitude of the centre of the map'),
    '#default_value' => $defaults['latlong'],
    '#size' => 50,
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['width'] = array(
    '#type' => 'textfield',
    '#id' => 'gmap-map-width',
    '#title' => t('Map width'),
    '#default_value' => $defaults['width'],
    '#size' => 25,
    '#attributes' => array('class' => 'gmap-control'),
  ); 
  $form['macroform']['height'] = array(
    '#type' => 'textfield',
    '#id' => 'gmap-map-height',
    '#title' => t('Map height'),
    '#default_value' => $defaults['height'],
    '#size' => 25,
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['alignment'] = array(
    '#type' => 'gmap_align',
    '#map' => 'map',
    '#title' => t('Alignment'),
  );
  $form['macroform']['overlayedit'] = array(
    '#type' => 'gmap_overlay_edit',
    '#map' => 'map',
    '#title' => t('What happens when you click on the map'),
  );

  $form['macroform']['zoom'] = array(
    '#type' => 'select', 
    '#id' => 'gmap-map-zoom',
    '#title' => t('The current magnification of the map'),
    '#default_value' => $defaults['zoom'],
    '#options' => drupal_map_assoc(range(0, 17)),
    '#attributes' => array('class' => 'gmap-control'),
  );
  $form['macroform']['textarea'] = array(
    '#type' => 'gmap_macrotext',
    '#map' => 'map',
    '#default_value' => '',
    '#title' => t('Macro text'),
  );
  return $form;
}

/**
 * Implementation of hook_views_style_plugins()
 */
function gmap_views_style_plugins() {
  return array(
    'gmap' => array(
      'name' => t('Gmap View'),
      'theme' => 'views_view_gmap',
      'needs_fields' => true,
      'validate' => 'views_ui_plugin_validate_list',
    )
  );
}

/**
 * Get list of available markers.
 */
function gmap_get_markers($reset=FALSE){
  static $markers;
  if (!is_array($markers) || $reset){
    $markers = array();
    $markerdir = variable_get('gmap_markerfiles',drupal_get_path('module', 'gmap').'/markers');
    // Retrieve and sort a list of available markers
    $marker_images = file_scan_directory($markerdir, '.*\.png$',array('shadow.png','.','..'),0,true, 'filename');
    foreach ($marker_images as $marker) {
      preg_match('/markers\/([a-z]*\/*[a-zA-Z_-]+)\d*\.png/',$marker->filename,$matches);
      if ($matches) {
        $markers[$matches[1]] = $matches[1];
      }
    }
    asort($markers);
  }
  return $markers;
}

/**
 * Display the nodes of a view in a Google Map
 */
function theme_views_view_gmap($view, $nodes) {
  $fields = _views_get_fields();
  $markers = array();
  foreach ($nodes as $node) {
    $node_data = node_load($node->nid);
    $location = $node_data->location;
    if (($location['lat']) && ($location['lon'])) {
      $marker_label = '';
      foreach ($view->field as $field) {
        $marker_label .= '<div class="'. $field['field'] .'">'. views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view) .'</div>';
      }
      $markers[] = array(
        'markername' => variable_get('gmap_node_marker_'.$node_data->type, ''),
        'label' => strtr($marker_label,"'\n\r",'" '),
        'latitude' => $location['lat'],
        'longitude' => $location['lon']
      );
    }
  }
  $thismap = array('id' => 'view_gmap', 'markers' => $markers);
  $output .= gmap_draw_map($thismap);
  return $output;
}
